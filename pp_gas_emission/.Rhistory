#install.packages(c("kohonen", "dummies", "ggplot2", "maptools", "sp","reshape2", "rgeos"))
library(kohonen)
# library(dummies) # The dummies package is no longer available in CRAN
library(ggplot2)
library(sp)
library(maptools)
library(reshape2)
library(rgeos)
library(MASS)
library(Hmisc)
## Data Loading
gt_2011 <- read.csv("gt_2011.csv")
gt_2012 <- read.csv("gt_2012.csv")
gt_2013 <- read.csv("gt_2013.csv")
gt_2014 <- read.csv("gt_2014.csv")
gt_2015 <- read.csv("gt_2015.csv")
training_set <- rbind(gt_2011,gt_2012)
validate_set <- gt_2013
test_set <- rbind(gt_2014,gt_2015)
describe(training_set)
#CO
COcorTable = abs(cor(training_set[,-11], y=training_set$CO))
COcorTable = COcorTable[order(COcorTable, decreasing = TRUE),,drop = FALSE]
head(COcorTable,6)
#NOX
NOXcorTable = abs(cor(training_set[,-10], y=training_set$NOX))
NOXcorTable = NOXcorTable[order(NOXcorTable, decreasing = TRUE),,drop = FALSE]
head(NOXcorTable,6)
feature_selected_training_set <- training_set[c("TIT")]
View(feature_selected_training_set)
plot(training_set)
hist(training_set)
install.packages("caTools")    # For Logistic regression
install.packages("ROCR")       # For ROC curve to evaluate model
library(caTools)
library(ROCR)
logistic_model <- glm(vs ~ wt + disp,
data = training_set,
family = "binomial")
View(feature_selected_training_set)
View(feature_selected_training_set)
View(gt_2011)
logistic_model <- glm(AT ~ CDP + disp,
data = training_set,
family = "binomial")
logistic_model <- glm(AT ~ CDP + CO,
data = training_set,
family = "binomial")
model <- lm(training_set, data = training_set)
model
ggplot(feature_selected_training_set, aes(x = TIT, y = CO)) + geom_point() + stat_smooth()
ggplot(feature_selected_training_set, aes(x = TIT, y = 'CO')) + geom_point() + stat_smooth()
ggplot(feature_selected_training_set, aes(x = 'TIT', y = 'CO')) + geom_point() + stat_smooth()
data.graph<-ggplot(traintestset, aes(x=TIT, y=CO))+geom_point()
data.graph
data.graph <- data.graph + geom_smooth(method="lm", col="black")
feature_selected_training_set <- training_set[c("TIT","TEY","CDP","GTEP","AT","CO","NOX")]
ggplot(feature_selected_training_set, aes(x = TIT, y = CO)) + geom_point() + stat_smooth()
data.graph<-ggplot(traintestset, aes(x=TIT, y=CO))+geom_point()
data.graph
data.graph
pred <- predict(model,test_set)
pred
rmse_val <- sqrt(mean(pred-test_set$CO)^2)
rmse_val
SSE = sum((pred-test_set$CO)^2)
SST = sum((pred-mean(test_set$CO))^2)
r2_test = 1 - SSE/SST
print(r2_test)
summary(model)
confint(model)
corrplot(training_)set
corrplot(training_set)
library(corrplot)
corrplot(training_set)
corrplot(corr(training_set)
corrplot(corr(training_set))
corr(training_set)
cor(training_set)
corrplot(cor(training_set), method="circle")
corrplot(cor(training_set), method="circle")['CO']
corrplot(cor(training_set)["CO"], method="circle")[
corrplot(cor(training_set)["CO"], method="circle")
corrplot(cor(training_set), method="circle")
corrplot(cor(training_set)['CO'], method="circle")
corrplot(cor(training_set[-11]), method="circle")
corrplot(cor(training_set[-10]), method="circle")
View(validate_set)
corrplot(cor(training_set[-10]), method="circle", addCoef.col = 'black')
corrplot(cor(training_set[-11]), method="circle", addCoef.col = 'black')
boxplot(training_data)
boxplot(training_set)
boxplot(training_set$AT)
boxplot(training_set[0])
boxplot(training_set[1])
boxplot(training_set$AP)
boxplot(training_set$AP, show.names=TRUE))
boxplot(training_set$AP, show.names=TRUE)
boxplot(training_set$AP, show.names=TRUE)
boxplot(training_set$AP, show.names=TRUE)
boxplot(training_set[1~11], show.names=TRUE)
boxplot(training_set[1:11], show.names=TRUE)
boxplot(training_set[1], show.names=TRUE)
boxplot(training_set[2], show.names=TRUE)
boxplot(training_set[3], show.names=TRUE)
boxplot(training_set[4], show.names=TRUE)
boxplot(training_set[5], show.names=TRUE)
boxplot(training_set[6], show.names=TRUE)
boxplot(training_set[7], show.names=TRUE)
boxplot(training_set[8], show.names=TRUE)
boxplot(training_set[9], show.names=TRUE)
# Find missing data
which(is.na(data))
sum(is.na(data))
# Find missing data
which(is.na(training_set))
sum(is.na(training_set))
# Perform Feature Scaling
training_set[, 2:3] = scale(training_set[, 2:3])
training_set
# Perform Feature Scaling
training_set[, 0:9] = scale(training_set[, 0:9])
# Perform Feature Scaling
training_set[, 0:9] = scale(training_set[, 0:9])
training_set <- rbind(gt_2011,gt_2012)
# Perform Feature Scaling
training_set[, 0:9] = scale(training_set[, 0:9])
# Perform Feature Scaling
training_set[, 1:9] = scale(training_set[, 1:9])
training_set
training_set <- rbind(gt_2011,gt_2012)
training_set
# Perform Feature Scaling
training_set[, 1:9] = scale(training_set[, 1:9])
test_set[, 2:3] = scale(test_set[, 2:3])
training_set
# Perform Feature Scaling
training_set[, 1:9] = scale(training_set[, 1:9])
validate_set[, 1:9] = scale(validate_set[, 1:9])
test_set[, 1:9] = scale(test_set[, 1:9])
hist(training_set)
boxplot(training_set)
hist(training_set[1:9])
boxplot(training_set)
boxplot(training_set[1:9])
# Perform standardization ( Makes data fit into a gaussian dist )
standardize = function(x){
z <- (x - mean(x)) / sd(x)
return( z)
}
View(gt_2014)
training_set[1:9] <-
apply(dataframe[1:9], 2, standardize)
training_set[1:9] <-
apply(training_set[1:9], 2, standardize)
training_set
boxplot(training_set[1:9])
hist(training_set[1:9])
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
training_set <-training_set %>% training_set(negate(is.factor), normalize)
training_set <-training_set %>% mutate_if(negate(is.factor), normalize)
minMax <- function(x) {
(x - min(x)) / (max(x) - min(x))
}
normalisedMydata <- as.data.frame(lapply(training_set, minMax))
View(normalisedMydata)
normalisedMydata <- as.data.frame(lapply(training_set[1:9], minMax))
View(normalisedMydata)
normalisedMydata <- training_set
normalisedMydata[1:9] <- as.data.frame(lapply(training_set1:9, minMax))
normalisedMydata[1:9] <- as.data.frame(lapply(training_set[1:9], minMax))
View(normalisedMydata)
boxplot(normalisedMydata)
boxplot(normalisedMydata[1:9])
# Find missing data
which(is.na(training_set))
sum(is.na(training_set))
# Perform Feature Scaling ( Make values all between -1 to 1)
training_set[, 1:9] = scale(training_set[, 1:9])
hist(normalisedMydata[1:9])
# Perform Feature Scaling ( Make values all between -1 to 1)
training_set[, 1:9] = scale(training_set[, 1:9])
hist(training_set)
log_training_set[, 1:9] = log(log_training_set[, 1:9])
# Log Transformation
log_training_set <- training_set
log_training_set[, 1:9] = log(log_training_set[, 1:9])
View(log_training_set)
training_set <- rbind(gt_2011,gt_2012)
# Log Transformation
log_training_set <- training_set
log_training_set[, 1:9] = log(log_training_set[, 1:9])
hist(log_training_set)
View(training_set)
hist(training_set)
hist(log_training_set)
#install.packages(c("kohonen", "dummies", "ggplot2", "maptools", "sp","reshape2", "rgeos"))
library(kohonen)
# Loading package
library(caTools)
library(ROCR)
# library(dummies) # The dummies package is no longer available in CRAN
library(ggplot2)
library(sp)
library(maptools)
library(reshape2)
library(rgeos)
library(MASS)
library(Hmisc)
library(caTools)
library(ROCR)
library(corrplot)
library(tidyverse)
## Data Loading
gt_2011 <- read.csv("gt_2011.csv")
gt_2012 <- read.csv("gt_2012.csv")
gt_2013 <- read.csv("gt_2013.csv")
gt_2014 <- read.csv("gt_2014.csv")
gt_2015 <- read.csv("gt_2015.csv")
training_set <- rbind(gt_2011,gt_2012)
validate_set <- gt_2013
test_set <- rbind(gt_2014,gt_2015)
# Find missing data
which(is.na(training_set))
sum(is.na(training_set))
# Perform Feature Scaling ( Make values all between -1 to 1)
training_set[, 1:9] = scale(training_set[, 1:9])
validate_set[, 1:9] = scale(validate_set[, 1:9])
test_set[, 1:9] = scale(test_set[, 1:9])
hist(training_set)
# Log Transformation
log_training_set <- training_set
log_training_set[, 1:9] = log(log_training_set[, 1:9])
hist(training_set)
# Log Transformation
log_training_set <- training_set
log_training_set[, 1:9] = log(log_training_set[, 1:9])
hist(log_training_set)
hist(training_set)
hist(log_training_set)
View(training_set)
getwd()
describe(training_set)
sd(training_set$AT)
sd(training_set$GTEP)
boxplot(training_set[1:9])
hist(training_set[1:9])
boxplot(training_set[1:9])
training_set <- rbind(gt_2011,gt_2012)
validate_set <- gt_2013
test_set <- rbind(gt_2014,gt_2015)
boxplot(training_set[1:9])
